// Code generated by counterfeiter. DO NOT EDIT.
package reporterfakes

import (
	"sync"

	"github.com/teddyking/snowflake"
	"github.com/teddyking/snowflake/reporter"
)

type FakeClient struct {
	PostSuiteStub        func(suite *snowflake.Suite) error
	postSuiteMutex       sync.RWMutex
	postSuiteArgsForCall []struct {
		suite *snowflake.Suite
	}
	postSuiteReturns struct {
		result1 error
	}
	postSuiteReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClient) PostSuite(suite *snowflake.Suite) error {
	fake.postSuiteMutex.Lock()
	ret, specificReturn := fake.postSuiteReturnsOnCall[len(fake.postSuiteArgsForCall)]
	fake.postSuiteArgsForCall = append(fake.postSuiteArgsForCall, struct {
		suite *snowflake.Suite
	}{suite})
	fake.recordInvocation("PostSuite", []interface{}{suite})
	fake.postSuiteMutex.Unlock()
	if fake.PostSuiteStub != nil {
		return fake.PostSuiteStub(suite)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.postSuiteReturns.result1
}

func (fake *FakeClient) PostSuiteCallCount() int {
	fake.postSuiteMutex.RLock()
	defer fake.postSuiteMutex.RUnlock()
	return len(fake.postSuiteArgsForCall)
}

func (fake *FakeClient) PostSuiteArgsForCall(i int) *snowflake.Suite {
	fake.postSuiteMutex.RLock()
	defer fake.postSuiteMutex.RUnlock()
	return fake.postSuiteArgsForCall[i].suite
}

func (fake *FakeClient) PostSuiteReturns(result1 error) {
	fake.PostSuiteStub = nil
	fake.postSuiteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) PostSuiteReturnsOnCall(i int, result1 error) {
	fake.PostSuiteStub = nil
	if fake.postSuiteReturnsOnCall == nil {
		fake.postSuiteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.postSuiteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.postSuiteMutex.RLock()
	defer fake.postSuiteMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ reporter.Client = new(FakeClient)
