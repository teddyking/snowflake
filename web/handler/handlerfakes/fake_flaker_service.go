// Code generated by counterfeiter. DO NOT EDIT.
package handlerfakes

import (
	"context"
	"sync"

	"github.com/teddyking/snowflake/api"
	"github.com/teddyking/snowflake/web/handler"
	"google.golang.org/grpc"
)

type FakeFlakerService struct {
	ListStub        func(ctx context.Context, in *api.FlakerListReq, opts ...grpc.CallOption) (*api.FlakerListRes, error)
	listMutex       sync.RWMutex
	listArgsForCall []struct {
		ctx  context.Context
		in   *api.FlakerListReq
		opts []grpc.CallOption
	}
	listReturns struct {
		result1 *api.FlakerListRes
		result2 error
	}
	listReturnsOnCall map[int]struct {
		result1 *api.FlakerListRes
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFlakerService) List(ctx context.Context, in *api.FlakerListReq, opts ...grpc.CallOption) (*api.FlakerListRes, error) {
	fake.listMutex.Lock()
	ret, specificReturn := fake.listReturnsOnCall[len(fake.listArgsForCall)]
	fake.listArgsForCall = append(fake.listArgsForCall, struct {
		ctx  context.Context
		in   *api.FlakerListReq
		opts []grpc.CallOption
	}{ctx, in, opts})
	fake.recordInvocation("List", []interface{}{ctx, in, opts})
	fake.listMutex.Unlock()
	if fake.ListStub != nil {
		return fake.ListStub(ctx, in, opts...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listReturns.result1, fake.listReturns.result2
}

func (fake *FakeFlakerService) ListCallCount() int {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	return len(fake.listArgsForCall)
}

func (fake *FakeFlakerService) ListArgsForCall(i int) (context.Context, *api.FlakerListReq, []grpc.CallOption) {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	return fake.listArgsForCall[i].ctx, fake.listArgsForCall[i].in, fake.listArgsForCall[i].opts
}

func (fake *FakeFlakerService) ListReturns(result1 *api.FlakerListRes, result2 error) {
	fake.ListStub = nil
	fake.listReturns = struct {
		result1 *api.FlakerListRes
		result2 error
	}{result1, result2}
}

func (fake *FakeFlakerService) ListReturnsOnCall(i int, result1 *api.FlakerListRes, result2 error) {
	fake.ListStub = nil
	if fake.listReturnsOnCall == nil {
		fake.listReturnsOnCall = make(map[int]struct {
			result1 *api.FlakerListRes
			result2 error
		})
	}
	fake.listReturnsOnCall[i] = struct {
		result1 *api.FlakerListRes
		result2 error
	}{result1, result2}
}

func (fake *FakeFlakerService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeFlakerService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ handler.FlakerService = new(FakeFlakerService)
