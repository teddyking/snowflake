// Code generated by counterfeiter. DO NOT EDIT.
package flakerfakes

import (
	"sync"

	"github.com/teddyking/snowflake/api"
	"github.com/teddyking/snowflake/services/flaker"
)

type FakeStore struct {
	ListReportsStub        func() ([]*api.Report, error)
	listReportsMutex       sync.RWMutex
	listReportsArgsForCall []struct{}
	listReportsReturns     struct {
		result1 []*api.Report
		result2 error
	}
	listReportsReturnsOnCall map[int]struct {
		result1 []*api.Report
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStore) ListReports() ([]*api.Report, error) {
	fake.listReportsMutex.Lock()
	ret, specificReturn := fake.listReportsReturnsOnCall[len(fake.listReportsArgsForCall)]
	fake.listReportsArgsForCall = append(fake.listReportsArgsForCall, struct{}{})
	fake.recordInvocation("ListReports", []interface{}{})
	fake.listReportsMutex.Unlock()
	if fake.ListReportsStub != nil {
		return fake.ListReportsStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listReportsReturns.result1, fake.listReportsReturns.result2
}

func (fake *FakeStore) ListReportsCallCount() int {
	fake.listReportsMutex.RLock()
	defer fake.listReportsMutex.RUnlock()
	return len(fake.listReportsArgsForCall)
}

func (fake *FakeStore) ListReportsReturns(result1 []*api.Report, result2 error) {
	fake.ListReportsStub = nil
	fake.listReportsReturns = struct {
		result1 []*api.Report
		result2 error
	}{result1, result2}
}

func (fake *FakeStore) ListReportsReturnsOnCall(i int, result1 []*api.Report, result2 error) {
	fake.ListReportsStub = nil
	if fake.listReportsReturnsOnCall == nil {
		fake.listReportsReturnsOnCall = make(map[int]struct {
			result1 []*api.Report
			result2 error
		})
	}
	fake.listReportsReturnsOnCall[i] = struct {
		result1 []*api.Report
		result2 error
	}{result1, result2}
}

func (fake *FakeStore) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.listReportsMutex.RLock()
	defer fake.listReportsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStore) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ flaker.Store = new(FakeStore)
