// Code generated by counterfeiter. DO NOT EDIT.
package reporterfakes

import (
	"sync"

	"github.com/teddyking/snowflake/api"
	"github.com/teddyking/snowflake/services/reporter"
)

type FakeStore struct {
	CreateReportStub        func(report *api.Report) error
	createReportMutex       sync.RWMutex
	createReportArgsForCall []struct {
		report *api.Report
	}
	createReportReturns struct {
		result1 error
	}
	createReportReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStore) CreateReport(report *api.Report) error {
	fake.createReportMutex.Lock()
	ret, specificReturn := fake.createReportReturnsOnCall[len(fake.createReportArgsForCall)]
	fake.createReportArgsForCall = append(fake.createReportArgsForCall, struct {
		report *api.Report
	}{report})
	fake.recordInvocation("CreateReport", []interface{}{report})
	fake.createReportMutex.Unlock()
	if fake.CreateReportStub != nil {
		return fake.CreateReportStub(report)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.createReportReturns.result1
}

func (fake *FakeStore) CreateReportCallCount() int {
	fake.createReportMutex.RLock()
	defer fake.createReportMutex.RUnlock()
	return len(fake.createReportArgsForCall)
}

func (fake *FakeStore) CreateReportArgsForCall(i int) *api.Report {
	fake.createReportMutex.RLock()
	defer fake.createReportMutex.RUnlock()
	return fake.createReportArgsForCall[i].report
}

func (fake *FakeStore) CreateReportReturns(result1 error) {
	fake.CreateReportStub = nil
	fake.createReportReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStore) CreateReportReturnsOnCall(i int, result1 error) {
	fake.CreateReportStub = nil
	if fake.createReportReturnsOnCall == nil {
		fake.createReportReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createReportReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeStore) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createReportMutex.RLock()
	defer fake.createReportMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStore) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ reporter.Store = new(FakeStore)
