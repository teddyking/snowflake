// Code generated by counterfeiter. DO NOT EDIT.
package suitefakes

import (
	"sync"

	"github.com/teddyking/snowflake/api"
	"github.com/teddyking/snowflake/services/suite"
)

type FakeStore struct {
	CreateStub        func(suiteSummary *api.SuiteSummary) error
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		suiteSummary *api.SuiteSummary
	}
	createReturns struct {
		result1 error
	}
	createReturnsOnCall map[int]struct {
		result1 error
	}
	ListStub        func() ([]*api.SuiteSummary, error)
	listMutex       sync.RWMutex
	listArgsForCall []struct{}
	listReturns     struct {
		result1 []*api.SuiteSummary
		result2 error
	}
	listReturnsOnCall map[int]struct {
		result1 []*api.SuiteSummary
		result2 error
	}
	GetStub        func(codebase, commit, location string) (*api.Test, error)
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		codebase string
		commit   string
		location string
	}
	getReturns struct {
		result1 *api.Test
		result2 error
	}
	getReturnsOnCall map[int]struct {
		result1 *api.Test
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStore) Create(suiteSummary *api.SuiteSummary) error {
	fake.createMutex.Lock()
	ret, specificReturn := fake.createReturnsOnCall[len(fake.createArgsForCall)]
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		suiteSummary *api.SuiteSummary
	}{suiteSummary})
	fake.recordInvocation("Create", []interface{}{suiteSummary})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		return fake.CreateStub(suiteSummary)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.createReturns.result1
}

func (fake *FakeStore) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeStore) CreateArgsForCall(i int) *api.SuiteSummary {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return fake.createArgsForCall[i].suiteSummary
}

func (fake *FakeStore) CreateReturns(result1 error) {
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStore) CreateReturnsOnCall(i int, result1 error) {
	fake.CreateStub = nil
	if fake.createReturnsOnCall == nil {
		fake.createReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeStore) List() ([]*api.SuiteSummary, error) {
	fake.listMutex.Lock()
	ret, specificReturn := fake.listReturnsOnCall[len(fake.listArgsForCall)]
	fake.listArgsForCall = append(fake.listArgsForCall, struct{}{})
	fake.recordInvocation("List", []interface{}{})
	fake.listMutex.Unlock()
	if fake.ListStub != nil {
		return fake.ListStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.listReturns.result1, fake.listReturns.result2
}

func (fake *FakeStore) ListCallCount() int {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	return len(fake.listArgsForCall)
}

func (fake *FakeStore) ListReturns(result1 []*api.SuiteSummary, result2 error) {
	fake.ListStub = nil
	fake.listReturns = struct {
		result1 []*api.SuiteSummary
		result2 error
	}{result1, result2}
}

func (fake *FakeStore) ListReturnsOnCall(i int, result1 []*api.SuiteSummary, result2 error) {
	fake.ListStub = nil
	if fake.listReturnsOnCall == nil {
		fake.listReturnsOnCall = make(map[int]struct {
			result1 []*api.SuiteSummary
			result2 error
		})
	}
	fake.listReturnsOnCall[i] = struct {
		result1 []*api.SuiteSummary
		result2 error
	}{result1, result2}
}

func (fake *FakeStore) Get(codebase string, commit string, location string) (*api.Test, error) {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		codebase string
		commit   string
		location string
	}{codebase, commit, location})
	fake.recordInvocation("Get", []interface{}{codebase, commit, location})
	fake.getMutex.Unlock()
	if fake.GetStub != nil {
		return fake.GetStub(codebase, commit, location)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getReturns.result1, fake.getReturns.result2
}

func (fake *FakeStore) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *FakeStore) GetArgsForCall(i int) (string, string, string) {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return fake.getArgsForCall[i].codebase, fake.getArgsForCall[i].commit, fake.getArgsForCall[i].location
}

func (fake *FakeStore) GetReturns(result1 *api.Test, result2 error) {
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 *api.Test
		result2 error
	}{result1, result2}
}

func (fake *FakeStore) GetReturnsOnCall(i int, result1 *api.Test, result2 error) {
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 *api.Test
			result2 error
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 *api.Test
		result2 error
	}{result1, result2}
}

func (fake *FakeStore) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStore) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ suite.Store = new(FakeStore)
