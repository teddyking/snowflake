// Code generated by protoc-gen-go. DO NOT EDIT.
// source: types.proto

package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// State represents possible test states.
type Test_State int32

const (
	Test_UNKNOWN  Test_State = 0
	Test_PASSED   Test_State = 1
	Test_FAILED   Test_State = 2
	Test_SKIPPED  Test_State = 3
	Test_PENDING  Test_State = 4
	Test_PANICKED Test_State = 5
	Test_TIMEDOUT Test_State = 6
	Test_INVALID  Test_State = 7
)

var Test_State_name = map[int32]string{
	0: "UNKNOWN",
	1: "PASSED",
	2: "FAILED",
	3: "SKIPPED",
	4: "PENDING",
	5: "PANICKED",
	6: "TIMEDOUT",
	7: "INVALID",
}
var Test_State_value = map[string]int32{
	"UNKNOWN":  0,
	"PASSED":   1,
	"FAILED":   2,
	"SKIPPED":  3,
	"PENDING":  4,
	"PANICKED": 5,
	"TIMEDOUT": 6,
	"INVALID":  7,
}

func (x Test_State) String() string {
	return proto.EnumName(Test_State_name, int32(x))
}
func (Test_State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_types_4d59eb13fa93d2bc, []int{1, 0}
}

// A Report represents the result of a test suite run.
type Report struct {
	// description is the suite description, e.g. "Integration Suite".
	Description string `protobuf:"bytes,1,opt,name=description" json:"description,omitempty"`
	// import_path is the suite's project's import path, e.g. "github.com/teddyking/snowflake".
	ImportPath string `protobuf:"bytes,2,opt,name=import_path,json=importPath" json:"import_path,omitempty"`
	// commit is the current git commit of the codebase on which the suite was run.
	Commit string `protobuf:"bytes,3,opt,name=commit" json:"commit,omitempty"`
	// tests are the suite's test results.
	Tests []*Test `protobuf:"bytes,4,rep,name=tests" json:"tests,omitempty"`
	// started_at is the time at which the test suite started.
	StartedAt int64 `protobuf:"varint,5,opt,name=started_at,json=startedAt" json:"started_at,omitempty"`
	// finished_at is the time at which the test suite finished.
	FinishedAt           int64    `protobuf:"varint,6,opt,name=finished_at,json=finishedAt" json:"finished_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Report) Reset()         { *m = Report{} }
func (m *Report) String() string { return proto.CompactTextString(m) }
func (*Report) ProtoMessage()    {}
func (*Report) Descriptor() ([]byte, []int) {
	return fileDescriptor_types_4d59eb13fa93d2bc, []int{0}
}
func (m *Report) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Report.Unmarshal(m, b)
}
func (m *Report) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Report.Marshal(b, m, deterministic)
}
func (dst *Report) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Report.Merge(dst, src)
}
func (m *Report) XXX_Size() int {
	return xxx_messageInfo_Report.Size(m)
}
func (m *Report) XXX_DiscardUnknown() {
	xxx_messageInfo_Report.DiscardUnknown(m)
}

var xxx_messageInfo_Report proto.InternalMessageInfo

func (m *Report) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Report) GetImportPath() string {
	if m != nil {
		return m.ImportPath
	}
	return ""
}

func (m *Report) GetCommit() string {
	if m != nil {
		return m.Commit
	}
	return ""
}

func (m *Report) GetTests() []*Test {
	if m != nil {
		return m.Tests
	}
	return nil
}

func (m *Report) GetStartedAt() int64 {
	if m != nil {
		return m.StartedAt
	}
	return 0
}

func (m *Report) GetFinishedAt() int64 {
	if m != nil {
		return m.FinishedAt
	}
	return 0
}

// A Test represents the result of a test run.
type Test struct {
	// description is the test description, e.g. "Handler returns an HTTP 200".
	Description string `protobuf:"bytes,1,opt,name=description" json:"description,omitempty"`
	// state is the resulting state of the test run.
	State Test_State `protobuf:"varint,2,opt,name=state,enum=api.Test_State" json:"state,omitempty"`
	// failure represents a test failure and is only set if state == FAILED.
	Failure *Failure `protobuf:"bytes,3,opt,name=failure" json:"failure,omitempty"`
	// location is the filepath:linenumber for the test.
	Location string `protobuf:"bytes,4,opt,name=location" json:"location,omitempty"`
	// started_at is the time at which the test started.
	StartedAt int64 `protobuf:"varint,5,opt,name=started_at,json=startedAt" json:"started_at,omitempty"`
	// finished_at is the time at which the test finished.
	FinishedAt           int64    `protobuf:"varint,6,opt,name=finished_at,json=finishedAt" json:"finished_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Test) Reset()         { *m = Test{} }
func (m *Test) String() string { return proto.CompactTextString(m) }
func (*Test) ProtoMessage()    {}
func (*Test) Descriptor() ([]byte, []int) {
	return fileDescriptor_types_4d59eb13fa93d2bc, []int{1}
}
func (m *Test) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Test.Unmarshal(m, b)
}
func (m *Test) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Test.Marshal(b, m, deterministic)
}
func (dst *Test) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Test.Merge(dst, src)
}
func (m *Test) XXX_Size() int {
	return xxx_messageInfo_Test.Size(m)
}
func (m *Test) XXX_DiscardUnknown() {
	xxx_messageInfo_Test.DiscardUnknown(m)
}

var xxx_messageInfo_Test proto.InternalMessageInfo

func (m *Test) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Test) GetState() Test_State {
	if m != nil {
		return m.State
	}
	return Test_UNKNOWN
}

func (m *Test) GetFailure() *Failure {
	if m != nil {
		return m.Failure
	}
	return nil
}

func (m *Test) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *Test) GetStartedAt() int64 {
	if m != nil {
		return m.StartedAt
	}
	return 0
}

func (m *Test) GetFinishedAt() int64 {
	if m != nil {
		return m.FinishedAt
	}
	return 0
}

// A Failure represents a test failure.
type Failure struct {
	// message is the output from the failing test, e.g. "expected A to equal B".
	Message              string   `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Failure) Reset()         { *m = Failure{} }
func (m *Failure) String() string { return proto.CompactTextString(m) }
func (*Failure) ProtoMessage()    {}
func (*Failure) Descriptor() ([]byte, []int) {
	return fileDescriptor_types_4d59eb13fa93d2bc, []int{2}
}
func (m *Failure) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Failure.Unmarshal(m, b)
}
func (m *Failure) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Failure.Marshal(b, m, deterministic)
}
func (dst *Failure) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Failure.Merge(dst, src)
}
func (m *Failure) XXX_Size() int {
	return xxx_messageInfo_Failure.Size(m)
}
func (m *Failure) XXX_DiscardUnknown() {
	xxx_messageInfo_Failure.DiscardUnknown(m)
}

var xxx_messageInfo_Failure proto.InternalMessageInfo

func (m *Failure) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*Report)(nil), "api.Report")
	proto.RegisterType((*Test)(nil), "api.Test")
	proto.RegisterType((*Failure)(nil), "api.Failure")
	proto.RegisterEnum("api.Test_State", Test_State_name, Test_State_value)
}

func init() { proto.RegisterFile("types.proto", fileDescriptor_types_4d59eb13fa93d2bc) }

var fileDescriptor_types_4d59eb13fa93d2bc = []byte{
	// 360 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x92, 0x5f, 0x8b, 0xda, 0x40,
	0x14, 0xc5, 0x1b, 0xf3, 0x4f, 0x6f, 0xa4, 0x1d, 0xe6, 0xa1, 0x84, 0x42, 0x31, 0x58, 0x5a, 0x7c,
	0xca, 0x83, 0xfd, 0x04, 0xa1, 0x89, 0x25, 0x68, 0x63, 0x48, 0xb4, 0xfb, 0x28, 0xb3, 0x3a, 0xae,
	0x03, 0xc6, 0x84, 0xcc, 0xdd, 0x87, 0xfd, 0x7e, 0x7e, 0xb0, 0x65, 0x26, 0x51, 0xf6, 0x71, 0x61,
	0xdf, 0x72, 0x7e, 0xe7, 0x64, 0xee, 0x3d, 0xc3, 0x80, 0x87, 0x2f, 0x0d, 0x97, 0x61, 0xd3, 0xd6,
	0x58, 0x53, 0x93, 0x35, 0x62, 0x7a, 0x35, 0xc0, 0x29, 0x78, 0x53, 0xb7, 0x48, 0x03, 0xf0, 0x0e,
	0x5c, 0xee, 0x5b, 0xd1, 0xa0, 0xa8, 0x2f, 0xbe, 0x11, 0x18, 0xb3, 0x51, 0xf1, 0x16, 0xd1, 0x09,
	0x78, 0xa2, 0x52, 0xd9, 0x5d, 0xc3, 0xf0, 0xe4, 0x0f, 0x74, 0x02, 0x3a, 0x94, 0x33, 0x3c, 0xd1,
	0xaf, 0xe0, 0xec, 0xeb, 0xaa, 0x12, 0xe8, 0x9b, 0xda, 0xeb, 0x15, 0x9d, 0x80, 0x8d, 0x5c, 0xa2,
	0xf4, 0xad, 0xc0, 0x9c, 0x79, 0xf3, 0x51, 0xc8, 0x1a, 0x11, 0x6e, 0xb8, 0xc4, 0xa2, 0xe3, 0xf4,
	0x3b, 0x80, 0x44, 0xd6, 0x22, 0x3f, 0xec, 0x18, 0xfa, 0x76, 0x60, 0xcc, 0xcc, 0x62, 0xd4, 0x93,
	0x48, 0xfd, 0xef, 0x1d, 0xc5, 0x45, 0xc8, 0x53, 0xe7, 0x3b, 0xda, 0x87, 0x1b, 0x8a, 0x70, 0x7a,
	0x1d, 0x80, 0xa5, 0xce, 0x7b, 0x47, 0x89, 0x9f, 0x60, 0x4b, 0x64, 0xc8, 0xf5, 0xfa, 0x9f, 0xe7,
	0x5f, 0xee, 0xbb, 0x84, 0xa5, 0xc2, 0x45, 0xe7, 0xd2, 0x5f, 0xe0, 0x1e, 0x99, 0x38, 0x3f, 0xb7,
	0x5c, 0x77, 0xf1, 0xe6, 0x63, 0x1d, 0x5c, 0x74, 0xac, 0xb8, 0x99, 0xf4, 0x1b, 0x0c, 0xcf, 0xf5,
	0x9e, 0xe9, 0x69, 0x96, 0x9e, 0x76, 0xd7, 0x1f, 0x6e, 0x55, 0x83, 0xad, 0x77, 0xa2, 0x1e, 0xb8,
	0xdb, 0x6c, 0x99, 0xad, 0x1f, 0x32, 0xf2, 0x89, 0x02, 0x38, 0x79, 0x54, 0x96, 0x49, 0x4c, 0x0c,
	0xf5, 0xbd, 0x88, 0xd2, 0x55, 0x12, 0x93, 0x81, 0x0a, 0x95, 0xcb, 0x34, 0xcf, 0x93, 0x98, 0x98,
	0x4a, 0xe4, 0x49, 0x16, 0xa7, 0xd9, 0x5f, 0x62, 0xd1, 0x31, 0x0c, 0xf3, 0x28, 0x4b, 0xff, 0x2c,
	0x93, 0x98, 0xd8, 0x4a, 0x6d, 0xd2, 0x7f, 0x49, 0xbc, 0xde, 0x6e, 0x88, 0xa3, 0x82, 0x69, 0xf6,
	0x3f, 0x5a, 0xa5, 0x31, 0x71, 0xa7, 0x3f, 0xc0, 0xed, 0x0b, 0x52, 0x1f, 0xdc, 0x8a, 0x4b, 0xc9,
	0x9e, 0x78, 0x7f, 0x89, 0x37, 0xf9, 0xe8, 0xe8, 0xe7, 0xf3, 0xfb, 0x35, 0x00, 0x00, 0xff, 0xff,
	0x9c, 0x16, 0x2c, 0xd9, 0x4d, 0x02, 0x00, 0x00,
}
